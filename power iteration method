import numpy as np

def power_iteration(A, num_iterations=1000, tolerance=1e-10):
    n = A.shape[0]
    b_k = np.random.rand(n)
    
    for _ in range(num_iterations):
        b_k1 = np.dot(A, b_k)
        b_k1_norm = np.linalg.norm(b_k1)
        b_k = b_k1 / b_k1_norm
        
        if np.linalg.norm(np.dot(A, b_k) - b_k1_norm * b_k) < tolerance:
            break
    
    eigenvalue = np.dot(b_k.T, np.dot(A, b_k))
    return eigenvalue, b_k

# Example usage:
A = np.array([[4, 1, 1], [1, 3, -1], [1, -1, 2]])
eigenvalue_power, eigenvector_power = power_iteration(A)
print("Power Iteration Method:")
print("Eigenvalue:", eigenvalue_power)
print("Eigenvector:", eigenvector_power)
