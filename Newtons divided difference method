import numpy as np


def newton_divided_differences(x_points, y_points):
    n = len(x_points)
    coef = np.zeros([n, n])
    coef[:,0] = y_points

    for j in range(1, n):
        for i in range(n-j):
            coef[i][j] = (coef[i+1][j-1] - coef[i][j-1]) / (x_points[i+j] - x_points[i])

    def newton_polynomial(x):
        result = coef[0, 0]
        product_term = 1.0
        for i in range(1, n):
            product_term *= (x - x_points[i-1])
            result += coef[0, i] * product_term
        return result

    return newton_polynomial, coef[0, :]


